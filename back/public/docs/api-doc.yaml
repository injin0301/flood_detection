openapi: 3.0.0
info:
  title: 'Flood Detection API'
  description: ''
  version: 1.0.0
paths:
  /api/login:
    post:
      tags:
        - 'Login Check'
      summary: 'Creates a user token.'
      description: 'Creates a user token.'
      operationId: login_check_post
      requestBody:
        description: 'The login data'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  nullable: false
                password:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: 'User token created'
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  token: { type: string, readOnly: true, nullable: false }
                type: object
        '404':
          description: 'Utilisateur non trouvé'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
        '406':
          description: "Manque de l'email ou du mot de passe"
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
  /api/toutes/pieces:
    get:
      tags:
        - Pieces
      operationId: get_app_api_all_piece
      requestBody:
        description: 'Le body peut contenir le CSRF Token'
        required: false
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Liste de toutes les Pièces'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Piece'
        '403':
          description: "Le CSRF Token n'est pas valide"
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  '/api/piece/{piece}/put':
    put:
      tags:
        - Pieces
      operationId: put_app_api_update_piece_put
      parameters:
        -
          name: piece
          in: path
          required: true
          schema:
            type: string
            pattern: '\d*'
      requestBody:
        description: 'Les informations de la pièce à mettre à jour pour PUT'
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                nom:
                  type: string
                idUtilisateur:
                  type: integer
              type: object
      responses:
        '200':
          description: 'Pièce modifiée avec succès'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '406':
          description: 'Manque de données requises'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  '/api/piece/{piece}/patch':
    patch:
      tags:
        - Pieces
      operationId: patch_app_api_update_piece_path
      parameters:
        -
          name: piece
          in: path
          required: true
          schema:
            type: string
            pattern: '\d*'
      requestBody:
        description: "Les informations de la pièce à mettre à jour pour PATCH.\n            Ce n'est pas obligatoire de tout mettre"
        required: false
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                nom:
                  type: string
                idUtilisateur:
                  type: integer
              type: object
      responses:
        '200':
          description: 'Pièce modifiée avec succès'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '406':
          description: 'Manque de données requises'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  '/api/piece/{piece}/suppression':
    delete:
      tags:
        - Pieces
      operationId: delete_app_api_delete_piece
      parameters:
        -
          name: piece
          in: path
          required: true
          schema:
            type: string
            pattern: '\d*'
      requestBody:
        description: 'Pour supprimer une pièce'
        required: false
        content:
          application/json:
            schema:
              properties:
                piece:
                  type: integer
              type: object
      responses:
        '204':
          description: 'Pièce supprimée avec succès'
        '404':
          description: 'Pièce non trouvée'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  /api/piece/ajout:
    post:
      tags:
        - Pieces
      operationId: post_app_api_add_piece
      requestBody:
        description: 'Le body contient les informations de la pièce à créer'
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                nom:
                  type: string
                idUtilisateur:
                  type: integer
              type: object
      responses:
        '201':
          description: 'Pièce créée avec succès'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '406':
          description: 'Manque de données requises'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  '/api/piece/{piece}':
    get:
      tags:
        - Pieces
      operationId: get_app_api_get_piece
      parameters:
        -
          name: piece
          in: path
          required: true
          schema:
            type: string
            pattern: '\d*'
      requestBody:
        description: 'Le body peut contenir le CSRF Token'
        required: false
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Détails de la pièce'
          content:
            application/json:
              schema:
                properties:
                  id: { type: integer }
                  nom: { type: string }
                  prenom: { type: string }
                  description: { type: string }
                  capteur: { properties: { id: { type: integer }, humidite: { type: number, format: float }, temperature: { type: number, format: float }, niveau_eau: { type: number, format: float }, inondation: { type: boolean } }, type: object }
                type: object
        '404':
          description: 'Pièce non trouvée'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  /api/csrf-token/:
    get:
      tags:
        - 'CSRF Token'
      operationId: get_generate_token_init
      responses:
        '200':
          description: 'Route Pour générer le CSRF Token'
          content:
            application/json:
              schema:
                properties:
                  csrf_token: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  /api/csrf-token/protected-action:
    post:
      tags:
        - 'CSRF Token'
      operationId: post_generate_token_protected-action
      requestBody:
        description: 'Le body doit contenir le CSRF Token'
        required: true
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Permet de validé le CSRF Token'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '403':
          description: "Le CSRF Token n'est pas valide"
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  /api/register/utilisateur:
    post:
      tags:
        - 'Login Check'
      operationId: post_app_api_register_user
      requestBody:
        description: 'Pour créer un utilisateur'
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '201':
          description: 'Utilisateur créé avec succès'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '406':
          description: "Manque de l'email ou du mot de passe"
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
        '409':
          description: 'Il existe déjà un utilisateur avec cet email'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
  /api/tous/utilisateurs:
    get:
      tags:
        - Utilisateur
      operationId: get_app_api_tous_utilisateur
      requestBody:
        description: 'Le body peut contenir le CSRF Token'
        required: false
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Liste de tous les Utilisateurs'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Utilisateur'
        '403':
          description: "Le CSRF Token n'est pas valide"
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
      security:
        -
          BearerAuth: []
  '/api/utilisateur/{utilisateur}':
    put:
      tags:
        - Utilisateur
      operationId: put_app_api_utilisateur_put
      parameters:
        -
          name: utilisateur
          in: path
          required: true
          schema:
            type: string
            pattern: '\d*'
      requestBody:
        description: "Les informations de l'utilisateur à mettre à jour"
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                roles:
                  type: array
                  items: { type: string }
                password:
                  type: string
                nom:
                  type: string
                prenom:
                  type: string
                tel:
                  type: string
                city:
                  type: string
                zipCode:
                  type: integer
                piece:
                  properties: { id: { type: integer } }
                  type: object
              type: object
      responses:
        '201':
          description: 'Utilisateur modifié'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '406':
          description: 'Erreur de validation des données'
          content:
            application/json:
              schema:
                properties:
                  err: { type: string }
                type: object
      security:
        -
          BearerAuth: []
components:
  schemas:
    Piece:
      required:
        - id
        - nom
        - description
        - capteur
      properties:
        id:
          type: integer
        nom:
          type: string
        description:
          type: string
        utilisateur:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Utilisateur'
        capteur:
          type: array
          items:
            $ref: '#/components/schemas/Capteur'
      type: object
    Utilisateur:
      required:
        - id
        - email
        - password
        - nom
        - prenom
        - city
        - zipCode
        - piece
        - userIdentifier
      properties:
        id:
          type: integer
        email:
          type: string
        roles:
          title: 'The user roles'
          type: array
          items:
            type: string
          default: []
        password:
          title: 'The hashed password'
          type: string
        nom:
          type: string
        prenom:
          type: string
        tel:
          type: integer
          nullable: true
        city:
          type: string
        zipCode:
          type: string
        piece:
          type: array
          items:
            $ref: '#/components/schemas/Piece'
        userIdentifier:
          title: 'A visual identifier that represents this user.'
          type: string
      type: object
    Capteur:
      required:
        - id
        - humidite
        - temperature
        - niveauEau
      properties:
        id:
          type: integer
        humidite:
          type: number
          format: float
        temperature:
          type: number
          format: float
        inondation:
          type: boolean
          nullable: true
        piece:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Piece'
        niveauEau:
          type: number
          format: float
      type: object
  securitySchemes:
    BearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
    JWT:
      type: http
      bearerFormat: JWT
      scheme: bearer
security: []
tags:
  -
    name: Pieces
  -
    name: 'CSRF Token'
  -
    name: 'Login Check'
  -
    name: Utilisateur

