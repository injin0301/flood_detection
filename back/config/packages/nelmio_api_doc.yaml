openapi: 3.0.0
info:
  title: 'Hello API Platform'
  description: ''
  version: 1.0.0
paths:
  /api/login:
    post:
      tags:
        - 'Login Check'
      summary: 'Creates a user token.'
      description: 'Creates a user token.'
      operationId: login_check_post
      requestBody:
        description: 'The login data'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  nullable: false
                password:
                  type: string
                  nullable: false
              type: object
      responses:
        '200':
          description: 'User token created'
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  token: { type: string, readOnly: true, nullable: false }
                type: object
  '/_error/{code}':
    get:
      operationId: get__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    put:
      operationId: put__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    post:
      operationId: post__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    delete:
      operationId: delete__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    options:
      operationId: options__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    head:
      operationId: head__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    patch:
      operationId: patch__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
    trace:
      operationId: trace__preview_error
      parameters:
        -
          name: code
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        default:
          description: ''
  /api/all/utilisateurs:
    get:
      operationId: get_app_api_all_utilisateur
      requestBody:
        description: 'Le body contien le CSRF Token'
        required: false
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Liste de tout les Utilisateur'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Utilisateur'
        '403':
          description: "Le CSRF Token n'est pas valide"
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
  /api/csrf-token/:
    get:
      operationId: get_generate_token_init
      responses:
        '200':
          description: 'Route Pour générer le CSRF Token'
          content:
            application/json:
              schema:
                properties:
                  csrf_token: { type: string }
                type: object
  /api/csrf-token/protected-action:
    post:
      operationId: post_generate_token_protected-action
      requestBody:
        description: 'Le body doit contenir le CSRF Token'
        required: true
        content:
          application/json:
            schema:
              properties:
                csrf_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Permet de validé le CSRF Token'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '403':
          description: "Le CSRF Token n'est pas valide"
          content:
            application/json:
              schema:
                properties:
                  error: { type: string }
                type: object
components:
  schemas:
    Utilisateur:
      required:
        - id
        - email
        - password
        - nom
        - prenom
        - city
        - zipCode
        - piece
        - userIdentifier
      properties:
        id:
          type: integer
        email:
          type: string
        roles:
          title: 'The user roles'
          type: array
          items:
            type: string
          default: []
        password:
          title: 'The hashed password'
          type: string
        nom:
          type: string
        prenom:
          type: string
        tel:
          type: integer
          nullable: true
        city:
          type: string
        zipCode:
          type: string
        piece:
          type: array
          items:
            $ref: '#/components/schemas/Piece'
        userIdentifier:
          title: 'A visual identifier that represents this user.'
          type: string
      type: object
    Piece:
      required:
        - id
        - nom
        - description
        - capteur
      properties:
        id:
          type: integer
        nom:
          type: string
        description:
          type: string
        utilisateur:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Utilisateur'
        capteur:
          type: array
          items:
            $ref: '#/components/schemas/Capteur'
      type: object
    Capteur:
      required:
        - id
        - humidite
        - temperature
        - niveauEau
      properties:
        id:
          type: integer
        humidite:
          type: number
          format: float
        temperature:
          type: number
          format: float
        piece:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Piece'
        niveauEau:
          type: number
          format: float
      type: object
  securitySchemes:
    JWT:
      type: http
      bearerFormat: JWT
      scheme: bearer
security: []
tags:
  -
    name: 'Login Check'
    description: 'Login Check'

